// TODO: This doesn't work yet, though it would be cool. It needs modules, or
//       top-level reification of definitions:
//       https://relationalai.slack.com/archives/CTLEJ99EW/p1605984400258700
/*
// For this file, delete any existing values for all relations we're inserting.
def _new_inserts(p,vs...) = insert(p, vs...)
def delete[p](oldvals...) = p(oldvals...)
*/



// (Note the boundary is walls)
def _grid_h = 31.0
def _grid_w = 28.0

def delete = :grid_w,grid_w ; :grid_h,grid_h
def insert[:grid_w] = _grid_w
def insert[:grid_h] = _grid_h


// Install edbs for pacman pos
def delete[:pacman_pos] = pacman_pos
def insert[:pacman_pos] = ^Point2D[14.0, 8.0]
def insert[:dead] = false  // no-op, but prevents undef compile errors

// All the ghosts start in the middle
def delete[:ghost_pos] = ghost_pos
def _ghost_pos_x[g in ghost] = ghost_init_x - (gid - 2.5) from gid where ghost_by_id(gid,g)
def _ghost_pos_y[g in ghost](v) = v=ghost_init_y and g != blinky
def _ghost_pos_y = blinky, ghost_init_y + 3.0  // start blinky out of the cage!
def insert[:ghost_pos][g in ghost] {
    ^Point2D[_ghost_pos_x[g], _ghost_pos_y[g]]
}

def blinky = ghost_by_id[1]

def ghost_init_x = 14.5
def ghost_init_y = _grid_h/2.0 + 1.5


// Facing direction

def delete[:pacman_facing] = pacman_facing
def insert[:pacman_facing][:x] = 1.0
def insert[:pacman_facing][:y] = 0.0

def delete[:ghost_facing][g in ghost] = ghost_facing[g]
def insert[:ghost_facing][g in ghost][:x] = 0.0
def insert[:ghost_facing][g in ghost][:y] = 1.0



// Score Keeping
def delete[:score] = score
def insert[:score] = 0.0

def delete[:lives] = lives
def insert[:lives] = 3
