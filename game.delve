// TODO: Without this, we get an arity _warning_ from the defs in updates.delve
// TODO(1898) remove after fixing issue #1898
def insert[:dummy] = true

// --- PacMan --------------------------------

entity pacman _ = true   // (singleton)

// --- Ghost Configs -------------------------
// From https://en.wikipedia.org/wiki/Ghosts_(Pac-Man)#Known_ghosts

entity ghost ghost_by_id = {1;2;3;4}

def ghost_name_by_id = {
    1, "Blinky";  // Chaser
    2, "Pinky";   // Ambusher
    3, "Inky";    // Fickle
    4, "Clide";   // Feigned Ignorance
}
def ghost_color_by_id = {
    1, "red";
    2, "pink";
    3, "cyan";
    4, "orange";
}

ic ghost_config_total(gid) {
    ghost_by_id(gid, _) implies ghost_name_by_id(gid,_) and ghost_color_by_id(gid,_)
}

// Note ghost_x,ghost_y may not yet be defined until the level is initialized
ic all_ghosts_on_board(g,x,y) {
    ghost_x(g, x) implies (x >= 0 and x <= grid_w + 1) and
    ghost_y(g, y) implies (y >= 0 and y <= grid_h + 1)
}

// ---- Walls and Dots --------

// Walls and dots should be loaded via CSV. They're initialized here just to make things work.
//def insert[:walls_csv](x,y) = insert(:init) and x=0.0 and y=0.0
//def insert[:superdots_csv](x,y) = insert(:init) and x=0.0 and y=0.0


/*
    // Start with a box around the ghosts
    exists(i,j : {-2.0,-1.0,0.0,1.0,2.0}(i) and {-2.0,-1.0,0.0,1.0,2.0}(j) and
        (grid_w/2.0 + i)(x) and (grid_h/2.0 + j)(y) and
            (i = 2 or i = -2 or j = 2 or j = -2)
        )
*/





// --- Game Positioning ---------------------------------------

// Reverse index by tile - players, monster, etc
def tile_occupant[x,y] = p : pacman(p) and pacman_pos[:x](x) and pacman_pos[:y](y)
def tile_occupant[x,y] = g : ghost(g) and ghost_x(g, x) and ghost_y(g, y)

// ------------------------------------------------------------

// ============================================================
// === UI Rendering
// ============================================================

// TODO: Extracting characters from strings
// def pc_display_char[p in pc] = substring[pc_name[p], 1,1]
//def ghost_display_char[g in ghost] = substring[ghost_name[g], 1,1]


def display_char[p in pacman] = 'á—§'
def display_char = ghost_by_id[g],c : {
    1, '1';
    2, '2';
    3, '3';
    4, '4';
}(g,c) from g

def display_grid[x, y](c) =
    (tile_occupant[x,y](e) and display_char(e, c) from e)
    or dot(x,y) and c='.'
    or superdot(x,y) and c='*'
    or wall(x,y) and c='W'

// Flip y axis for printing characters!
def display_grid_topdown[display_x, display_y] =
    display_grid[x, y]
    from (x,y)
    where display_x = x and display_y = grid_h - y + 1


// Old version where i was printing the whole grid as a block in delve
//def display_grid[x in range[L,R,1], y in range[B,T,1]] =
//    if tile_occupant_pacman(x,y) then pacman_display_char
//    else if tile_occupant_ghost(x,y,_) then ghost_display_char[tile_occupant_ghost[x,y]]
//    else '.'
//    end end
//
//// Flip y axis for printing characters!
//def display_lines[row in range[1,screen_height,1], col in range[1,screen_width,1]] =
//    display_grid[x, y]
//    from (x,y)
//    where x = L + col - 1 and y = T - row + 1


// ------------------------------------------------------------
