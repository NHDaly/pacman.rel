def xs = range[1.0, grid_w, 1.0]
def ys = range[1.0, grid_h, 1.0]

def decision_point = x,y :
    xs(x) and ys(y) and
    not wall(x,y) and
        // Anything that's not a hallway or a corner:
        // (Dead-end tunnels, three-way intersections, and four-way intersections)
        num_paths[x,y] != 2

// (Temporary) Render the decision points for debugging purposes
// (Also, it's so cool that we can write into another relation like this! This
// multiple-predicate-dispatch / multi-body disjuncction thing is pretty cool!)
def display_grid[x, y](c) =
    decision_point(x,y) and c = 'D'

@inline def num_paths[x,y] = count[path_options[x,y]]

// NOTE: This must be keyed by (x,y) not a relation {:x,x; :y,y}, because the key is truly
// a _coordinate_ which needs both values. we could instead make an entity for a cell
// or something, which would also work, but otherwise we must use the two-tuple (x,y)
def path_options[x,y] = x1, y1 :
    xs(x) and ys(y) and
    not wall(x,y) and not wall(x1,y1)
        and {
            x+1 , y   ;
            x   , y+1 ;
            x-1 , y   ;
            x   , y-1 ;
        }(x1, y1)

ic hallways_and_corners_not_decision_points(x,y) {
    xs(x) and ys(y) implies  // TODO(BUG): Without this line, it was crashing the TXN (it was invalid delve, but still shouldn't crash)
    ((not wall(x,y) and not decision_point(x,y)) implies num_paths[x,y] = 2)
}


// Currently, all ghosts except blinky stay put
// def computed_new_pos_ghost[g in ghost](vs...) = g != blinky and ghost_pos[g](vs...)

// ------ Blinky AI ------------

def blinky_pos = ghost_pos[blinky]
def blinky_x = blinky_pos[:x]
def blinky_y = blinky_pos[:y]
def blinky_facing = ghost_facing[blinky]

def blinky_prev_pos[d] = blinky_pos[d] - blinky_facing[d]

def blinky_new_pos = {:x,x; :y,y}
    from x,y where
    if not decision_point(blinky_x, blinky_y) then
        // Continue to the open path that you didn't come from
        path_options[blinky_x,blinky_y](x,y) and
            not (blinky_prev_pos[:x], blinky_prev_pos[:y])(x,y)
    else  // decision point
        blinky_move_towards_pacman(x,y)
    end

def blinky_move_towards_pacman =
    ArgMin[x,y, mag :
            path_options[blinky_x,blinky_y](x,y) and
                not (blinky_prev_pos[:x], blinky_prev_pos[:y])(x,y) and
            mag = (pacman_pos[:x] - x)^2 + (pacman_pos[:y] - y)^2
        ]


def delete[:ghost_facing][g in blinky](vs...) = insert(:tick) and ghost_facing[blinky](vs...)
def insert[:ghost_facing][g in blinky][d](v) = insert(:tick) and v = blinky_new_pos[d]-blinky_pos[d]


def blinky = ghost_by_id[1]

// (includes wrapping via the portals)
def computed_new_pos_ghost[g,d](v) = g=blinky and v =
    (blinky_new_pos[d] - 1.0) % grid_dim[d] + 1.0


//def delete[:ghost_pos][g in ghost](vs...) = insert(:tick) and ghost_pos[g](vs...)
//def insert[:ghost_pos][g in ghost](vs...) = insert(:tick) and computed_new_pos_ghost[g](vs...)

// TODO: somehow this deletes _all_ the ghost positions instead of just Blinky
// I think this is a bug:
def delete[:ghost_pos][g in blinky](vs...) = insert(:tick) and ghost_pos[g](vs...)
def insert[:ghost_pos][g in blinky](vs...) = insert(:tick) and computed_new_pos_ghost[g](vs...)

